<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>org.example</groupId>
  <artifactId>studentProgress42-jpa-h2</artifactId>
  <version>1.0-SNAPSHOT</version>
  <name>studentProgress42 JPA H2 Module</name>
  <packaging>jar</packaging>

  <properties>
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>
    <hibernate.version>5.6.15.Final</hibernate.version>
    <h2.version>2.2.224</h2.version>
    <javax.persistence.version>2.2</javax.persistence.version>
    <slf4j.version>1.7.36</slf4j.version>
  </properties>

  <dependencies>
    <!-- Hibernate ORM: реализация JPA.
         Именно Hibernate будет управлять сущностями, SQL и транзакциями -->
    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-core</artifactId>
      <version>${hibernate.version}</version>
    </dependency>

    <!-- H2 Database: лёгкая встраиваемая база данных в памяти.
         Используется для тестов и учебных проектов, не требует установки -->
    <dependency>
      <groupId>com.h2database</groupId>
      <artifactId>h2</artifactId>
      <version>${h2.version}</version>
      <scope>runtime</scope>
    </dependency>

    <!-- JPA API: стандартные интерфейсы JPA (EntityManager, аннотации и т.д.).
         Нужен, чтобы проект компилировался независимо от конкретной реализации -->
    <dependency>
      <groupId>javax.persistence</groupId>
      <artifactId>javax.persistence-api</artifactId>
      <version>${javax.persistence.version}</version>
    </dependency>

    <!-- SLF4J + Simple Logger: простая реализация логирования через SLF4J.
         Hibernate пишет в лог через SLF4J, а эта зависимость выводит их в консоль -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-simple</artifactId>
      <version>${slf4j.version}</version>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <!-- Maven JAR Plugin: управляет упаковкой jar-файла.
           Добавляем в манифест mainClass и classpathPrefix -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.3.0</version>
        <configuration>
          <archive>
            <manifest>
              <addClasspath>true</addClasspath>
              <classpathPrefix>lib/</classpathPrefix>
              <mainClass>runner.AppMainJpa</mainClass>
            </manifest>
          </archive>
        </configuration>
      </plugin>

      <!-- Maven Assembly Plugin: позволяет собрать "fat jar" (jar-with-dependencies).
           Удобно запускать проект одной командой без ручного подключения зависимостей -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
        <version>3.6.0</version>
        <configuration>
          <descriptorRefs>
            <descriptorRef>jar-with-dependencies</descriptorRef>
          </descriptorRefs>
          <archive>
            <manifest>
              <mainClass>runner.AppMainJpa</mainClass>
            </manifest>
          </archive>
        </configuration>
        <executions>
          <execution>
            <id>make-assembly</id>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

</project>

